class Solution {
    public List<Integer> eventualSafeNodes(int[][] graph) {
        List<List<Integer>> adj=new ArrayList<>();
        for(int i=0;i<graph.length;i++){
            adj.add(new ArrayList<>());
        }
        int indeg[]=new int[graph.length];
        for(int i=0;i<graph.length;i++){
            for(int j:graph[i]){
                adj.get(j).add(i);
                 indeg[i]++;
            }
        }
        Queue<Integer> q=new LinkedList<>();
        for(int i=0;i<graph.length;i++){
            if(indeg[i]==0){
                q.add(i);
            }
        }
        List<Integer> ans=new ArrayList<>();
        while(!q.isEmpty()){
            int temp=q.poll();
            ans.add(temp);
            for(int nei:adj.get(temp)){
                  indeg[nei]--;
                if(indeg[nei]==0){
                   q.add(nei);
                }
            }
        }
        Collections.sort(ans);
        return ans;
    }
}
