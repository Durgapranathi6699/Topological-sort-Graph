class Solution {
    public int minimumTime(int n, int[][] relations, int[] time) {
        List<List<Integer>> adj=new ArrayList<>();
        for(int i=0;i<n;i++)  adj.add(new ArrayList<>());
        
         int indeg[]=new int[n];
         for(int a[]: relations){
            int u = a[0]-1;
            int v = a[1]-1;
            adj.get(u).add(v);
            indeg[v]++;
        }

        Queue<Integer> q=new LinkedList<>();
        int max[]=new int[n];
        int ans=0;
        for(int i=0;i<n;i++){
            if(indeg[i]==0){
                q.add(i);
                max[i]=time[i];
            }
        }
        
        while(!q.isEmpty()){
            int u=q.poll();
            for(int v:adj.get(u)){
                max[v]=Math.max(max[v],max[u]+time[v]);
                indeg[v]--;
                if(indeg[v]==0)  q.add(v);
            }  
        }
        
      for(int i=0;i<max.length;i++){
          ans=Math.max(ans,max[i]);
      }
        return ans;
    }
}
